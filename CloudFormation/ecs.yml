AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate service for backend Node.js app with ALB and MongoDB Atlas connectivity

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  EcrImageUrl:
    Type: String
  MongoUri:
    Type: String
  JwtSecret:
    Type: String

Resources:
  BackendTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/backend-log-group
      RetentionInDays: 14

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt BackendTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: backend-container
          Image: !Ref EcrImageUrl
          Essential: true
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: MONGO_URI
              Value: !Ref MongoUri
            - Name: JWT_SECRET
              Value: !Ref JwtSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to backend
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  BackendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: backend-alb
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref BackendSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: backend-tg
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref BackendALB
      Port: 80
      Protocol: HTTP

  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendListener
    Properties:
      Cluster: default
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref BackendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref BackendSecurityGroup
      LoadBalancers:
        - ContainerName: backend-container
          ContainerPort: 5000
          TargetGroupArn: !Ref BackendTargetGroup

Outputs:
  BackendLoadBalancerDNS:
    Description: Public DNS of the load balancer
    Value: !GetAtt BackendALB.DNSName