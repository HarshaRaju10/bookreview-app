name: BookReview CI/CD

on:
  push:
    branches:
      - main

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  build:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install backend dependencies
        working-directory: ./server
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./client
        run: npm install

      - name: Build frontend
        working-directory: ./client
        run: npm run build


  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Lint backend
        run: |
          cd server
          npx eslint . || echo "Lint issues found"

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run backend unit tests
        run: |
          cd server
          npm test || echo "Tests failed or are not defined"

  audit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Scan for backend vulnerabilities
        run: |
          cd server
          npm audit || echo "Some vulnerabilities found"

  dockerize-and-push:
    runs-on: ubuntu-latest
    needs: [test, audit]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_IMAGE_URI }}

      - name: Build and tag Docker image
        run: |
          docker build -t bookreview-backend ./server
          docker tag bookreview-backend:latest ${{ secrets.ECR_IMAGE_URI }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_IMAGE_URI }}:latest

  deploy-backend:
    runs-on: ubuntu-latest
    needs: dockerize-and-push
    outputs:
      alb-url: ${{ steps.get-alb.outputs.alb-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy backend stack with CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file CloudFormation/ecs.yml \
            --stack-name bookreview-backend-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds=${{ secrets.SUBNET_IDS }} \
              EcrImageUrl=${{ secrets.ECR_IMAGE_URI }}:latest \
              MongoUri=${{ secrets.MONGO_URI }} \
              JwtSecret=${{ secrets.JWT_SECRET }}

      - name: Get ALB DNS from stack output
        id: get-alb
        run: |
          ALB_URL=$(aws cloudformation describe-stacks \
            --stack-name bookreview-backend-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BackendLoadBalancerDNS'].OutputValue" \
            --output text)
          echo "alb-url=http://$ALB_URL" >> "$GITHUB_OUTPUT"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    env:
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Replace backend URL in frontend
        run: |
          echo "Replacing backend URL..."
          echo "window.env = { API_URL: '${{ needs.deploy-backend.outputs.alb-url }}' };" > client/public/env.js

      - name: Build frontend again with backend URL
        run: |
          cd client
          npm install
          npm run build

      - name: Deploy frontend to S3
        run: |
          aws s3 sync client/dist s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
